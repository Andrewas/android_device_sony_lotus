#       modified:   include/gui/GLConsumer.h
#       modified:   include/media/openmax/OMX_IVCommon.h
#       modified:   include/ui/PixelFormat.h
#       modified:   include/ui/Region.h
#       modified:   libs/gui/GLConsumer.cpp
#       modified:   libs/ui/Android.mk
#       modified:   libs/ui/PixelFormat.cpp
#       modified:   opengl/include/EGL/eglext.h
#       modified:   opengl/libs/EGL/eglApi.cpp
#       modified:   opengl/libs/EGL/egl_entries.in
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       include/ui/legacy/
#       libs/ui/legacy/
diff --git a/frameworks/native/include/gui/GLConsumer.h b/frameworks/native/include/gui/GLConsumer.h
index f0a75dc..35aa19f 100644
--- a/frameworks/native/include/gui/GLConsumer.h
+++ b/frameworks/native/include/gui/GLConsumer.h
@@ -419,6 +419,7 @@ private:
     // It is set to false by detachFromContext, and then set to true again by
     // attachToContext.
     bool mAttached;
+
 };
 
 // ----------------------------------------------------------------------------
diff --git a/frameworks/native/include/media/openmax/OMX_IVCommon.h b/frameworks/native/include/media/openmax/OMX_IVCommon.h
index 85bf00d..db4a5e5 100644
--- a/frameworks/native/include/media/openmax/OMX_IVCommon.h
+++ b/frameworks/native/include/media/openmax/OMX_IVCommon.h
@@ -158,6 +158,7 @@ typedef enum OMX_COLOR_FORMATTYPE {
      * */
     OMX_COLOR_FormatAndroidOpaque = 0x7F000789,
     OMX_TI_COLOR_FormatYUV420PackedSemiPlanar = 0x7F000100,
+    OMX_STE_COLOR_FormatYUV420PackedSemiPlanarMB = 0x7FA00000,
     OMX_QCOM_COLOR_FormatYVU420SemiPlanar = 0x7FA30C00,
     OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03,
     OMX_SEC_COLOR_FormatNV12Tiled = 0x7FC00002,
diff --git a/frameworks/native/include/ui/PixelFormat.h b/frameworks/native/include/ui/PixelFormat.h
index 9f3e267..d89790d 100644
--- a/frameworks/native/include/ui/PixelFormat.h
+++ b/frameworks/native/include/ui/PixelFormat.h
@@ -64,6 +64,14 @@ enum {
     PIXEL_FORMAT_RGBA_5551   = HAL_PIXEL_FORMAT_RGBA_5551,  // 16-bit ARGB
     PIXEL_FORMAT_RGBA_4444   = HAL_PIXEL_FORMAT_RGBA_4444,  // 16-bit ARGB
     PIXEL_FORMAT_A_8         = 8,                           // 8-bit A
+
+#ifdef STE_HARDWARE
+    // Added Support for YUV42XMBN,
+    // Required for Copybit CC acceleration
+    PIXEL_FORMAT_YCBCR42XMBN = HAL_PIXEL_FORMAT_YCBCR42XMBN,
+    PIXEL_FORMAT_YCbCr_420_SP = HAL_PIXEL_FORMAT_YCbCr_420_SP,
+    PIXEL_FORMAT_YCbCr_420_P = HAL_PIXEL_FORMAT_YCbCr_420_P,
+#endif
 };
 
 typedef int32_t PixelFormat;
diff --git a/frameworks/native/include/ui/Region.h b/frameworks/native/include/ui/Region.h
index ce91f3b..e2abfde 100644
--- a/frameworks/native/include/ui/Region.h
+++ b/frameworks/native/include/ui/Region.h
@@ -25,6 +25,10 @@
 #include <ui/Rect.h>
 #include <utils/Flattenable.h>
 
+#ifdef STE_HARDWARE
+#include <hardware/copybit.h>
+#endif
+
 namespace android {
 // ---------------------------------------------------------------------------
 
@@ -210,6 +214,28 @@ Region& Region::operator -= (const Region& rhs) {
 Region& Region::operator += (const Point& pt) {
     return translateSelf(pt.x, pt.y);
 }
+
+#ifdef STE_HARDWARE
+// ---------------------------------------------------------------------------
+
+struct region_iterator : public copybit_region_t {
+    region_iterator(const Region& region)
+        : b(region.begin()), e(region.end()) {
+        this->next = iterate;
+    }
+private:
+    static int iterate(copybit_region_t const * self, copybit_rect_t* rect) {
+        region_iterator const* me = static_cast<region_iterator const*>(self);
+        if (me->b != me->e) {
+            *reinterpret_cast<Rect*>(rect) = *me->b++;
+            return 1;
+        }
+        return 0;
+    }
+    mutable Region::const_iterator b;
+    Region::const_iterator const e;
+};
+#endif
 // ---------------------------------------------------------------------------
 }; // namespace android
 
diff --git a/frameworks/native/libs/gui/GLConsumer.cpp b/frameworks/native/libs/gui/GLConsumer.cpp
index bec0f90..7a7958c 100644
--- a/frameworks/native/libs/gui/GLConsumer.cpp
+++ b/frameworks/native/libs/gui/GLConsumer.cpp
@@ -552,8 +552,18 @@ bool GLConsumer::isExternalFormat(uint32_t format)
     case HAL_PIXEL_FORMAT_YV12:
     // Legacy/deprecated YUV formats
     case HAL_PIXEL_FORMAT_YCbCr_422_SP:
-    case HAL_PIXEL_FORMAT_YCrCb_420_SP:
+#ifndef STE_HARDWARE
+     case HAL_PIXEL_FORMAT_YCrCb_420_SP:
+#else
+    case HAL_PIXEL_FORMAT_YCbCr_420_SP:
+#endif
     case HAL_PIXEL_FORMAT_YCbCr_422_I:
+#ifdef STE_HARDWARE
+    case HAL_PIXEL_FORMAT_YCrCb_422_SP:
+    case HAL_PIXEL_FORMAT_YCrCb_422_P:
+    case HAL_PIXEL_FORMAT_YCrCb_420_SP:
+    case HAL_PIXEL_FORMAT_YCrCb_420_P:
+#endif
         return true;
     }
 
diff --git a/frameworks/native/libs/ui/Android.mk b/frameworks/native/libs/ui/Android.mk
index bde0e2f..eaaabe5 100644
--- a/frameworks/native/libs/ui/Android.mk
+++ b/frameworks/native/libs/ui/Android.mk
@@ -26,6 +26,10 @@ LOCAL_SRC_FILES:= \
 	Region.cpp \
 	UiConfig.cpp
 
+ifeq ($(BOARD_USES_LEGACY_OVERLAY), true)
+LOCAL_SRC_FILES += legacy/Overlay.cpp
+endif
+
 LOCAL_SHARED_LIBRARIES := \
 	libcutils \
 	libhardware \
diff --git a/frameworks/native/libs/ui/PixelFormat.cpp b/frameworks/native/libs/ui/PixelFormat.cpp
index 3ced41d..e73dac8 100644
--- a/frameworks/native/libs/ui/PixelFormat.cpp
+++ b/frameworks/native/libs/ui/PixelFormat.cpp
@@ -100,11 +100,29 @@ status_t getPixelFormatInfo(PixelFormat format, PixelFormatInfo* info)
     // YUV format from the HAL are handled here
     switch (format) {
     case HAL_PIXEL_FORMAT_YCbCr_422_SP:
+#ifdef STE_HARDWARE
+    case HAL_PIXEL_FORMAT_YCrCb_422_SP:
+    case HAL_PIXEL_FORMAT_YCbCr_422_P:
+#endif
     case HAL_PIXEL_FORMAT_YCbCr_422_I:
+#ifdef STE_HARDWARE
+    case HAL_PIXEL_FORMAT_CbYCrY_422_I:
+#endif
         info->bitsPerPixel = 16;
         goto done;
+#ifdef STE_HARDWARE
+    case HAL_PIXEL_FORMAT_YCbCr_420_SP:
+#endif
     case HAL_PIXEL_FORMAT_YCrCb_420_SP:
     case HAL_PIXEL_FORMAT_YV12:
+#ifdef STE_HARDWARE
+    case HAL_PIXEL_FORMAT_YCbCr_420_SP_TILED:
+    case HAL_PIXEL_FORMAT_YCrCb_420_SP_TILED:
+    case HAL_PIXEL_FORMAT_YCbCr_420_P:
+    case HAL_PIXEL_FORMAT_YCbCr_420_I:
+    case HAL_PIXEL_FORMAT_CbYCrY_420_I:
+    case HAL_PIXEL_FORMAT_YCBCR42XMBN:
+#endif
         info->bitsPerPixel = 12;
      done:
         info->format = format;
diff --git a/frameworks/native/opengl/include/EGL/eglext.h b/frameworks/native/opengl/include/EGL/eglext.h
index 6c505ed..8e100ad 100644
--- a/frameworks/native/opengl/include/EGL/eglext.h
+++ b/frameworks/native/opengl/include/EGL/eglext.h
@@ -313,6 +313,7 @@ typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSURFACEPOINTERANGLEPROC) (EGLDisplay
 #endif
 
 #if KHRONOS_SUPPORT_INT64   /* EGLuint64NV requires 64-bit uint support */
+#ifndef STE_HARDWARE
 #ifndef EGL_NV_system_time
 #define EGL_NV_system_time 1
 typedef khronos_utime_nanoseconds_t EGLuint64NV;
@@ -324,6 +325,7 @@ typedef EGLuint64NV (EGLAPIENTRYP PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC) (void);
 typedef EGLuint64NV (EGLAPIENTRYP PFNEGLGETSYSTEMTIMENVPROC) (void);
 #endif
 #endif
+#endif
 
 #if KHRONOS_SUPPORT_INT64 /* EGLuint64KHR requires 64-bit uint support */
 #ifndef EGL_KHR_stream
diff --git a/frameworks/native/opengl/libs/EGL/eglApi.cpp b/frameworks/native/opengl/libs/EGL/eglApi.cpp
index a243b32..595972c 100644
--- a/frameworks/native/opengl/libs/EGL/eglApi.cpp
+++ b/frameworks/native/opengl/libs/EGL/eglApi.cpp
@@ -124,13 +124,13 @@ static const extention_map_t sExtensionMap[] = {
             (__eglMustCastToProperFunctionPointerType)&eglSignalSyncKHR },
     { "eglGetSyncAttribKHR",
             (__eglMustCastToProperFunctionPointerType)&eglGetSyncAttribKHR },
-
+#ifndef STE_HARDWARE
     // EGL_NV_system_time
     { "eglGetSystemTimeFrequencyNV",
             (__eglMustCastToProperFunctionPointerType)&eglGetSystemTimeFrequencyNV },
     { "eglGetSystemTimeNV",
             (__eglMustCastToProperFunctionPointerType)&eglGetSystemTimeNV },
-
+#endif
     // EGL_KHR_wait_sync
     { "eglWaitSyncKHR",
             (__eglMustCastToProperFunctionPointerType)&eglWaitSyncKHR },
@@ -1449,6 +1449,7 @@ EGLBoolean eglPresentationTimeANDROID(EGLDisplay dpy, EGLSurface surface,
 // ----------------------------------------------------------------------------
 // NVIDIA extensions
 // ----------------------------------------------------------------------------
+#ifndef STE_HARDWARE
 EGLuint64NV eglGetSystemTimeFrequencyNV()
 {
     clearError();
@@ -1484,3 +1485,4 @@ EGLuint64NV eglGetSystemTimeNV()
 
     return setErrorQuiet(EGL_BAD_DISPLAY, 0);
 }
+#endif
diff --git a/frameworks/native/opengl/libs/EGL/egl_entries.in b/frameworks/native/opengl/libs/EGL/egl_entries.in
index 70d0e52..138f41e 100644
--- a/frameworks/native/opengl/libs/EGL/egl_entries.in
+++ b/frameworks/native/opengl/libs/EGL/egl_entries.in
@@ -82,10 +82,10 @@ EGL_ENTRY(EGLClientBuffer, eglGetRenderBufferANDROID, EGLDisplay, EGLSurface)
 EGL_ENTRY(EGLint, eglDupNativeFenceFDANDROID, EGLDisplay, EGLSyncKHR)
 
 /* NVIDIA extensions */
-
+#ifndef STE_HARDWARE
 EGL_ENTRY(EGLuint64NV, eglGetSystemTimeFrequencyNV, void)
 EGL_ENTRY(EGLuint64NV, eglGetSystemTimeNV, void)
-
+#endif
 /* IMG extensions */
 
 EGL_ENTRY(EGLBoolean, eglHibernateProcessIMG, void)
diff --git a/frameworks/native/include/ui/legacy/Overlay.h b/frameworks/native/include/ui/legacy/Overlay.h
new file mode 100644
index 0000000..bbf16d2
--- /dev/null
+++ b/frameworks/native/include/ui/legacy/Overlay.h
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_OVERLAY_H
+#define ANDROID_OVERLAY_H
+
+#include <stdint.h>
+#include <sys/types.h>
+
+#include <utils/Errors.h>
+#include <binder/IInterface.h>
+#include <utils/RefBase.h>
+#include <utils/threads.h>
+
+#include <ui/PixelFormat.h>
+
+typedef void (*overlay_set_fd_hook)(void *data,
+        int fd);
+typedef void (*overlay_set_crop_hook)(void *data,
+        uint32_t x, uint32_t y, uint32_t w, uint32_t h);
+typedef void (*overlay_queue_buffer_hook)(void *data,
+        void* buffer);
+
+namespace android {
+
+class IMemory;
+class IMemoryHeap;
+
+// ----------------------------------------------------------------------------
+
+class Overlay : public virtual RefBase
+{
+public:
+    Overlay(overlay_set_fd_hook set_fd,
+            overlay_set_crop_hook set_crop,
+            overlay_queue_buffer_hook queue_buffer,
+            void* data);
+
+    /* destroys this overlay */
+    void destroy();
+
+    /* get the HAL handle for this overlay */
+    void* getHandleRef() const;
+
+    /* blocks until an overlay buffer is available and return that buffer. */
+    status_t dequeueBuffer(void** buffer);
+
+    /* release the overlay buffer and post it */
+    status_t queueBuffer(void* buffer);
+
+    /* change the width and height of the overlay */
+    status_t resizeInput(uint32_t width, uint32_t height);
+
+    status_t setCrop(uint32_t x, uint32_t y, uint32_t w, uint32_t h) ;
+
+#ifdef OMAP_ENHANCEMENT
+    status_t set_s3d_params(int32_t s3d_mode, uint32_t s3d_fmt, uint32_t s3d_order, uint32_t s3d_subsampling);
+#endif
+
+    status_t getCrop(uint32_t* x, uint32_t* y, uint32_t* w, uint32_t* h) ;
+
+    /* set the buffer attributes */
+    status_t setParameter(int param, int value);
+    status_t setFd(int fd);
+
+    /* returns the address of a given buffer if supported, NULL otherwise. */
+    void* getBufferAddress(void* buffer);
+
+    /* get physical informations about the overlay */
+    uint32_t getWidth() const;
+    uint32_t getHeight() const;
+    int32_t getFormat() const;
+    int32_t getWidthStride() const;
+    int32_t getHeightStride() const;
+    int32_t getBufferCount() const;
+    status_t getStatus() const;
+
+private:
+    virtual ~Overlay();
+
+    // C style hook
+    overlay_set_fd_hook set_fd_hook;
+    overlay_set_crop_hook set_crop_hook;
+    overlay_queue_buffer_hook queue_buffer_hook;
+    void* hook_data;
+
+    status_t mStatus;
+};
+
+// ----------------------------------------------------------------------------
+
+}; // namespace android
+
+#endif // ANDROID_OVERLAY_H
diff --git a/frameworks/native/libs/ui/legacy/Overlay.cpp b/frameworks/native/libs/ui/legacy/Overlay.cpp
new file mode 100644
index 0000000..acf67c6
--- /dev/null
+++ b/frameworks/native/libs/ui/legacy/Overlay.cpp
@@ -0,0 +1,136 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "Overlay"
+
+#include <binder/IMemory.h>
+#include <binder/Parcel.h>
+#include <utils/Errors.h>
+#include <binder/MemoryHeapBase.h>
+
+#include <ui/legacy/Overlay.h>
+
+namespace android {
+
+Overlay::Overlay(overlay_set_fd_hook set_fd,
+        overlay_set_crop_hook set_crop,
+        overlay_queue_buffer_hook queue_buffer,
+        void *data)
+    : mStatus(NO_INIT)
+{
+    set_fd_hook = set_fd;
+    set_crop_hook = set_crop;
+    queue_buffer_hook = queue_buffer;
+    hook_data = data;
+    mStatus = NO_ERROR;
+}
+
+Overlay::~Overlay() {
+}
+
+status_t Overlay::dequeueBuffer(void** buffer)
+{
+    return mStatus;
+}
+
+status_t Overlay::queueBuffer(void* buffer)
+{
+    if (queue_buffer_hook)
+        queue_buffer_hook(hook_data, buffer);
+    return mStatus;
+}
+
+status_t Overlay::resizeInput(uint32_t width, uint32_t height)
+{
+    return mStatus;
+}
+
+status_t Overlay::setParameter(int param, int value)
+{
+    return mStatus;
+}
+
+status_t Overlay::setCrop(uint32_t x, uint32_t y, uint32_t w, uint32_t h)
+{
+    if (set_crop_hook)
+        set_crop_hook(hook_data, x, y, w, h);
+    return mStatus;
+}
+
+#ifdef OMAP_ENHANCEMENT
+    status_t Overlay::set_s3d_params(int32_t s3d_mode, uint32_t s3d_fmt, uint32_t s3d_order, uint32_t s3d_subsampling)
+    {
+        return mStatus;
+        return mOverlayData->set_s3d_params(mOverlayData, s3d_mode, s3d_fmt, s3d_order, s3d_subsampling);
+    }
+#endif
+
+status_t Overlay::getCrop(uint32_t* x, uint32_t* y, uint32_t* w, uint32_t* h)
+{
+    return mStatus;
+}
+
+status_t Overlay::setFd(int fd)
+{
+    if (set_fd_hook)
+        set_fd_hook(hook_data, fd);
+    return mStatus;
+}
+
+int32_t Overlay::getBufferCount() const
+{
+    return 0;
+}
+
+void* Overlay::getBufferAddress(void* buffer)
+{
+    return 0;
+}
+
+void Overlay::destroy() {
+}
+
+status_t Overlay::getStatus() const {
+    return mStatus;
+}
+
+void* Overlay::getHandleRef() const {
+    return 0;
+}
+
+uint32_t Overlay::getWidth() const {
+    return 0;
+}
+
+uint32_t Overlay::getHeight() const {
+    return 0;
+}
+
+int32_t Overlay::getFormat() const {
+    return 0;
+}
+
+int32_t Overlay::getWidthStride() const {
+    return 0;
+}
+
+int32_t Overlay::getHeightStride() const {
+    return 0;
+}
+
+// ----------------------------------------------------------------------------
+
+}; // namespace android
